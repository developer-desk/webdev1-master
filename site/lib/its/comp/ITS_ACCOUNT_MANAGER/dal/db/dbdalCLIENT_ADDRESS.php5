<?php
/* Copyright (C) 2009 - 2013 Infinite Tech Solutions Inc - All Rights Reserved
*
* NOTICE: All information contained herein is, and remains
* the PROPERTY OF INFINITE TECH SOLUTIONS INCORPORATED. 
* The intellectual and technical concepts contained
* herein are proprietary to Infinite Tech Solutions Incorporated
* and may be covered by U.S., Canadian, and Foreign Patents,
* patents in process, and are protected by trade secret or copyright law.
* DISSEMINATION OF THIS INFORMATION OR REPRODUCTION OF THIS MATERIAL
* IS STRICTLY FORBIDDEN UNLESS PRIOR WRITTEN PERMISSION IS OBTAINED
* FROM INFINITE TECH SOLUTIONS INCORPORATED.
*/ 
 
 
class dbdalCLIENT_ADDRESS extends dbdalObj
{
	public function __construct($lg)
	{
		$this->tblName = "CLIENT_ADDRESS";

		parent::__construct(DBConnection::Dev(), 1, $lg);


	}

	public function selectRecordNew($filters, $cnt=false, $isList=null)
	{

		$sql = "SELECT";
		$selectList = 
		$cnt ?" count(*) " :
"			CLIENT_ADDRESS.CLIENT_ADDRESS_ID AS CLIENT_ADDRESS_CLIENT_ADDRESS_ID 
			,CLIENT_ADDRESS.CLIENT_ADDRESS_TYPE_ID AS CLIENT_ADDRESS_CLIENT_ADDRESS_TYPE_ID 
			,CLIENT_ADDRESS.CLIENT_ID AS CLIENT_ADDRESS_CLIENT_ID 
			,CLIENT_ADDRESS.ATTENTION_TO AS CLIENT_ADDRESS_ATTENTION_TO 
			,CLIENT_ADDRESS.ADDRESS_LINE_1 AS CLIENT_ADDRESS_ADDRESS_LINE_1 
			,CLIENT_ADDRESS.ADDRESS_LINE_2 AS CLIENT_ADDRESS_ADDRESS_LINE_2 
			,CLIENT_ADDRESS.CITY AS CLIENT_ADDRESS_CITY 
			,CLIENT_ADDRESS.ADDR_PROVINCE_ID AS CLIENT_ADDRESS_ADDR_PROVINCE_ID 
			,CLIENT_ADDRESS.POSTAL_CODE AS CLIENT_ADDRESS_POSTAL_CODE 
			,CLIENT_ADDRESS.TELEPHONE_NUMBER AS CLIENT_ADDRESS_TELEPHONE_NUMBER 
            ,B.NAME AS ADDR_PROVINCE_TXT_NAME
            ,C.NAME AS ADDR_COUNTRY_TXT_NAME
";
		$from = 
		"		FROM CLIENT_ADDRESS 
                    LEFT JOIN ADDR_PROVINCE A 
                        ON CLIENT_ADDRESS.ADDR_PROVINCE_ID = A.PROVINCE_CODE
                    LEFT JOIN ADDR_PROVINCE_TXT B 
                        ON A.ADDR_PROVINCE_ID = B.ADDR_PROVINCE_ID
                    LEFT JOIN ADDR_COUNTRY_TXT C 
                        ON A.ADDR_COUNTRY_ID = C.ADDR_COUNTRY_ID
                    
		";
$sql .= $selectList.$from;
		if (isset($filters["CLIENT_ADDRESS_CLIENT_ADDRESS_ID"]))
			$this->db->addWhere("CLIENT_ADDRESS.client_address_id", $filters["CLIENT_ADDRESS_CLIENT_ADDRESS_ID"], DATATYPE::$int, $isList["CLIENT_ADDRESS_CLIENT_ADDRESS_ID"]);
		if (isset($filters["CLIENT_ADDRESS_CLIENT_ADDRESS_TYPE_ID"]))
			$this->db->addWhere("CLIENT_ADDRESS.client_address_type_id", $filters["CLIENT_ADDRESS_CLIENT_ADDRESS_TYPE_ID"], DATATYPE::$int, $isList["CLIENT_ADDRESS_CLIENT_ADDRESS_TYPE_ID"]);
		if (isset($filters["CLIENT_ADDRESS_CLIENT_ID"]))
			$this->db->addWhere("CLIENT_ADDRESS.client_id", $filters["CLIENT_ADDRESS_CLIENT_ID"], DATATYPE::$int, $isList["CLIENT_ADDRESS_CLIENT_ID"]);
		if (isset($filters["CLIENT_ADDRESS_ATTENTION_TO"]))
			$this->db->addWhere("CLIENT_ADDRESS.attention_to", $filters["CLIENT_ADDRESS_ATTENTION_TO"], DATATYPE::$varchar, $isList["CLIENT_ADDRESS_ATTENTION_TO"]);
		if (isset($filters["CLIENT_ADDRESS_ADDRESS_LINE_1"]))
			$this->db->addWhere("CLIENT_ADDRESS.address_line_1", $filters["CLIENT_ADDRESS_ADDRESS_LINE_1"], DATATYPE::$varchar, $isList["CLIENT_ADDRESS_ADDRESS_LINE_1"]);
		if (isset($filters["CLIENT_ADDRESS_ADDRESS_LINE_2"]))
			$this->db->addWhere("CLIENT_ADDRESS.address_line_2", $filters["CLIENT_ADDRESS_ADDRESS_LINE_2"], DATATYPE::$varchar, $isList["CLIENT_ADDRESS_ADDRESS_LINE_2"]);
		if (isset($filters["CLIENT_ADDRESS_CITY"]))
			$this->db->addWhere("CLIENT_ADDRESS.city", $filters["CLIENT_ADDRESS_CITY"], DATATYPE::$varchar, $isList["CLIENT_ADDRESS_CITY"]);
		if (isset($filters["CLIENT_ADDRESS_ADDR_PROVINCE_ID"]))
			$this->db->addWhere("CLIENT_ADDRESS.addr_province_id", $filters["CLIENT_ADDRESS_ADDR_PROVINCE_ID"], DATATYPE::$int, $isList["CLIENT_ADDRESS_ADDR_PROVINCE_ID"]);
		if (isset($filters["CLIENT_ADDRESS_POSTAL_CODE"]))
			$this->db->addWhere("CLIENT_ADDRESS.postal_code", $filters["CLIENT_ADDRESS_POSTAL_CODE"], DATATYPE::$varchar, $isList["CLIENT_ADDRESS_POSTAL_CODE"]);
		if (isset($filters["CLIENT_ADDRESS_TELEPHONE_NUMBER"]))
			$this->db->addWhere("CLIENT_ADDRESS.telephone_number", $filters["CLIENT_ADDRESS_TELEPHONE_NUMBER"], DATATYPE::$varchar, $isList["CLIENT_ADDRESS_TELEPHONE_NUMBER"]);

		$recordSet = parent::executeStmtSelect($sql);
		$this->db->clearWhere();
		return $this->db->recordSetGetAll_assoc($recordSet);

	}

	public function selectRecord_edit($CLIENT_ADDRESS_client_address_id=null)
	{

		$sql = "SELECT
			CLIENT_ADDRESS.CLIENT_ADDRESS_ID AS CLIENT_ADDRESS_CLIENT_ADDRESS_ID 
			,CLIENT_ADDRESS.CLIENT_ADDRESS_TYPE_ID AS CLIENT_ADDRESS_CLIENT_ADDRESS_TYPE_ID 
			,CLIENT_ADDRESS_TYPE.CB AS CLIENT_ADDRESS_TYPE_CB 
			,CLIENT_ADDRESS_TYPE.DC AS CLIENT_ADDRESS_TYPE_DC 
			,CLIENT_ADDRESS_TYPE.MB AS CLIENT_ADDRESS_TYPE_MB 
			,CLIENT_ADDRESS_TYPE.DM AS CLIENT_ADDRESS_TYPE_DM 
			,CLIENT_ADDRESS_TYPE.TS AS CLIENT_ADDRESS_TYPE_TS 
			,CLIENT_ADDRESS_TYPE_TXT.LG_ID AS CLIENT_ADDRESS_TYPE_TXT_LG_ID 
			,CLIENT_ADDRESS_TYPE_TXT.NAME AS CLIENT_ADDRESS_TYPE_TXT_NAME 
			,CLIENT_ADDRESS_TYPE_TXT.DESCR AS CLIENT_ADDRESS_TYPE_TXT_DESCR 
			,CLIENT_ADDRESS_TYPE_TXT.CB AS CLIENT_ADDRESS_TYPE_TXT_CB 
			,CLIENT_ADDRESS_TYPE_TXT.DC AS CLIENT_ADDRESS_TYPE_TXT_DC 
			,CLIENT_ADDRESS_TYPE_TXT.MB AS CLIENT_ADDRESS_TYPE_TXT_MB 
			,CLIENT_ADDRESS_TYPE_TXT.DM AS CLIENT_ADDRESS_TYPE_TXT_DM 
			,CLIENT_ADDRESS_TYPE_TXT.TS AS CLIENT_ADDRESS_TYPE_TXT_TS 
			,CLIENT_ADDRESS.CLIENT_ID AS CLIENT_ADDRESS_CLIENT_ID 
			,CLIENT_ADDRESS.ATTENTION_TO AS CLIENT_ADDRESS_ATTENTION_TO 
			,CLIENT_ADDRESS.ADDRESS_LINE_1 AS CLIENT_ADDRESS_ADDRESS_LINE_1 
			,CLIENT_ADDRESS.ADDRESS_LINE_2 AS CLIENT_ADDRESS_ADDRESS_LINE_2 
			,CLIENT_ADDRESS.CITY AS CLIENT_ADDRESS_CITY 
			,CLIENT_ADDRESS.ADDR_PROVINCE_ID AS CLIENT_ADDRESS_ADDR_PROVINCE_ID 
			,ADDR_PROVINCE.ADDR_COUNTRY_ID AS ADDR_PROVINCE_ADDR_COUNTRY_ID 
			,ADDR_COUNTRY.COUNTRY_CODE AS ADDR_COUNTRY_COUNTRY_CODE 
			,ADDR_COUNTRY.TRAN_GATEWAY_ID AS ADDR_COUNTRY_TRAN_GATEWAY_ID 
			,TRAN_GATEWAY.CB AS TRAN_GATEWAY_CB 
			,TRAN_GATEWAY.DC AS TRAN_GATEWAY_DC 
			,TRAN_GATEWAY.MB AS TRAN_GATEWAY_MB 
			,TRAN_GATEWAY.DM AS TRAN_GATEWAY_DM 
			,TRAN_GATEWAY.TS AS TRAN_GATEWAY_TS 
			,TRAN_GATEWAY_TXT.LG_ID AS TRAN_GATEWAY_TXT_LG_ID 
			,TRAN_GATEWAY_TXT.NAME AS TRAN_GATEWAY_TXT_NAME 
			,TRAN_GATEWAY_TXT.DESCR AS TRAN_GATEWAY_TXT_DESCR 
			,TRAN_GATEWAY_TXT.CB AS TRAN_GATEWAY_TXT_CB 
			,TRAN_GATEWAY_TXT.DC AS TRAN_GATEWAY_TXT_DC 
			,TRAN_GATEWAY_TXT.MB AS TRAN_GATEWAY_TXT_MB 
			,TRAN_GATEWAY_TXT.DM AS TRAN_GATEWAY_TXT_DM 
			,TRAN_GATEWAY_TXT.TS AS TRAN_GATEWAY_TXT_TS 
			,ADDR_COUNTRY.STATUS_ID AS ADDR_COUNTRY_STATUS_ID 
			,ADDR_COUNTRY.CB AS ADDR_COUNTRY_CB 
			,ADDR_COUNTRY.DC AS ADDR_COUNTRY_DC 
			,ADDR_COUNTRY.MB AS ADDR_COUNTRY_MB 
			,ADDR_COUNTRY.DM AS ADDR_COUNTRY_DM 
			,ADDR_COUNTRY.TS AS ADDR_COUNTRY_TS 
			,ADDR_COUNTRY_TXT.LG_ID AS ADDR_COUNTRY_TXT_LG_ID 
			,ADDR_COUNTRY_TXT.NAME AS ADDR_COUNTRY_TXT_NAME 
			,ADDR_COUNTRY_TXT.DESCR AS ADDR_COUNTRY_TXT_DESCR 
			,ADDR_COUNTRY_TXT.CB AS ADDR_COUNTRY_TXT_CB 
			,ADDR_COUNTRY_TXT.DC AS ADDR_COUNTRY_TXT_DC 
			,ADDR_COUNTRY_TXT.MB AS ADDR_COUNTRY_TXT_MB 
			,ADDR_COUNTRY_TXT.DM AS ADDR_COUNTRY_TXT_DM 
			,ADDR_COUNTRY_TXT.TS AS ADDR_COUNTRY_TXT_TS 
			,ADDR_PROVINCE.PROVINCE_CODE AS ADDR_PROVINCE_PROVINCE_CODE 
			,ADDR_PROVINCE.TRAN_GATEWAY_ID AS ADDR_PROVINCE_TRAN_GATEWAY_ID 
			,ADDR_PROVINCE.STATUS_ID AS ADDR_PROVINCE_STATUS_ID 
			,ADDR_PROVINCE.CB AS ADDR_PROVINCE_CB 
			,ADDR_PROVINCE.DC AS ADDR_PROVINCE_DC 
			,ADDR_PROVINCE.MB AS ADDR_PROVINCE_MB 
			,ADDR_PROVINCE.DM AS ADDR_PROVINCE_DM 
			,ADDR_PROVINCE.TS AS ADDR_PROVINCE_TS 
			,ADDR_PROVINCE_TXT.LG_ID AS ADDR_PROVINCE_TXT_LG_ID 
			,ADDR_PROVINCE_TXT.NAME AS ADDR_PROVINCE_TXT_NAME 
			,ADDR_PROVINCE_TXT.DESCR AS ADDR_PROVINCE_TXT_DESCR 
			,ADDR_PROVINCE_TXT.CB AS ADDR_PROVINCE_TXT_CB 
			,ADDR_PROVINCE_TXT.DC AS ADDR_PROVINCE_TXT_DC 
			,ADDR_PROVINCE_TXT.MB AS ADDR_PROVINCE_TXT_MB 
			,ADDR_PROVINCE_TXT.DM AS ADDR_PROVINCE_TXT_DM 
			,ADDR_PROVINCE_TXT.TS AS ADDR_PROVINCE_TXT_TS 
			,CLIENT_ADDRESS.POSTAL_CODE AS CLIENT_ADDRESS_POSTAL_CODE 
			,CLIENT_ADDRESS.TELEPHONE_NUMBER AS CLIENT_ADDRESS_TELEPHONE_NUMBER 
			,CLIENT_ADDRESS_TXT.CLIENT_ADDRESS_ID AS CLIENT_ADDRESS_TXT_CLIENT_ADDRESS_ID 
			,CLIENT_ADDRESS_TXT.LG_ID AS CLIENT_ADDRESS_TXT_LG_ID 
			,CLIENT_ADDRESS_TXT.NAME AS CLIENT_ADDRESS_TXT_NAME 
			,CLIENT_ADDRESS_TXT.DESCR AS CLIENT_ADDRESS_TXT_DESCR 
			,CLIENT_ADDRESS_TXT.CB AS CLIENT_ADDRESS_TXT_CB 
			,CLIENT_ADDRESS_TXT.DC AS CLIENT_ADDRESS_TXT_DC 
			,CLIENT_ADDRESS_TXT.MB AS CLIENT_ADDRESS_TXT_MB 
			,CLIENT_ADDRESS_TXT.DM AS CLIENT_ADDRESS_TXT_DM 
			,CLIENT_ADDRESS_TXT.TS AS CLIENT_ADDRESS_TXT_TS 
		FROM CLIENT_ADDRESS 
		INNER JOIN CLIENT_ADDRESS_TXT 
			 ON CLIENT_ADDRESS.CLIENT_ADDRESS_ID = CLIENT_ADDRESS_TXT.CLIENT_ADDRESS_ID 
		INNER JOIN LG 
			 ON CLIENT_ADDRESS_TXT.LG_ID = LG.LG_ID 
			INNER JOIN LG_TXT 
			 ON LG.LG_ID = LG_TXT.LG_ID 
		INNER JOIN ADDR_PROVINCE 
			 ON CLIENT_ADDRESS.ADDR_PROVINCE_ID = ADDR_PROVINCE.ADDR_PROVINCE_ID 
		INNER JOIN ADDR_PROVINCE_TXT 
			 ON ADDR_PROVINCE.ADDR_PROVINCE_ID = ADDR_PROVINCE_TXT.ADDR_PROVINCE_ID 
			AND ADDR_PROVINCE_TXT.LG_ID = LG.LG_ID
		INNER JOIN ADDR_COUNTRY 
			 ON ADDR_PROVINCE.ADDR_COUNTRY_ID = ADDR_COUNTRY.ADDR_COUNTRY_ID 
		INNER JOIN ADDR_COUNTRY_TXT 
			 ON ADDR_COUNTRY.ADDR_COUNTRY_ID = ADDR_COUNTRY_TXT.ADDR_COUNTRY_ID 
			AND ADDR_COUNTRY_TXT.LG_ID = LG.LG_ID
		INNER JOIN TRAN_GATEWAY 
			 ON ADDR_COUNTRY.TRAN_GATEWAY_ID = TRAN_GATEWAY.TRAN_GATEWAY_ID 
		INNER JOIN TRAN_GATEWAY_TXT 
			 ON TRAN_GATEWAY.TRAN_GATEWAY_ID = TRAN_GATEWAY_TXT.TRAN_GATEWAY_ID 
			AND TRAN_GATEWAY_TXT.LG_ID = LG.LG_ID
		INNER JOIN CLIENT_ADDRESS_TYPE 
			 ON CLIENT_ADDRESS.CLIENT_ADDRESS_TYPE_ID = CLIENT_ADDRESS_TYPE.CLIENT_ADDRESS_TYPE_ID 
		INNER JOIN CLIENT_ADDRESS_TYPE_TXT 
			 ON CLIENT_ADDRESS_TYPE.CLIENT_ADDRESS_TYPE_ID = CLIENT_ADDRESS_TYPE_TXT.CLIENT_ADDRESS_TYPE_ID 
			AND CLIENT_ADDRESS_TYPE_TXT.LG_ID = LG.LG_ID
		";
		if (isset($CLIENT_ADDRESS_client_address_id))
			$this->db->addWhere("CLIENT_ADDRESS.client_address_id", $CLIENT_ADDRESS_client_address_id, DATATYPE::$int);

		$recordSet = parent::executeStmtSelect($sql);
		$this->db->clearWhere();
		return $this->db->recordSetGetAll_assoc($recordSet);

	}

	public function selectRecord($CLIENT_ADDRESS_client_address_id=null)
	{

		$sql = "SELECT
			CLIENT_ADDRESS.CLIENT_ADDRESS_ID AS CLIENT_ADDRESS_CLIENT_ADDRESS_ID 
			,CLIENT_ADDRESS.CLIENT_ADDRESS_TYPE_ID AS CLIENT_ADDRESS_CLIENT_ADDRESS_TYPE_ID 
			,CLIENT_ADDRESS_TYPE.CB AS CLIENT_ADDRESS_TYPE_CB 
			,CLIENT_ADDRESS_TYPE.DC AS CLIENT_ADDRESS_TYPE_DC 
			,CLIENT_ADDRESS_TYPE.MB AS CLIENT_ADDRESS_TYPE_MB 
			,CLIENT_ADDRESS_TYPE.DM AS CLIENT_ADDRESS_TYPE_DM 
			,CLIENT_ADDRESS_TYPE.TS AS CLIENT_ADDRESS_TYPE_TS 
			,CLIENT_ADDRESS_TYPE_TXT.LG_ID AS CLIENT_ADDRESS_TYPE_TXT_LG_ID 
			,CLIENT_ADDRESS_TYPE_TXT.NAME AS CLIENT_ADDRESS_TYPE_TXT_NAME 
			,CLIENT_ADDRESS_TYPE_TXT.DESCR AS CLIENT_ADDRESS_TYPE_TXT_DESCR 
			,CLIENT_ADDRESS_TYPE_TXT.CB AS CLIENT_ADDRESS_TYPE_TXT_CB 
			,CLIENT_ADDRESS_TYPE_TXT.DC AS CLIENT_ADDRESS_TYPE_TXT_DC 
			,CLIENT_ADDRESS_TYPE_TXT.MB AS CLIENT_ADDRESS_TYPE_TXT_MB 
			,CLIENT_ADDRESS_TYPE_TXT.DM AS CLIENT_ADDRESS_TYPE_TXT_DM 
			,CLIENT_ADDRESS_TYPE_TXT.TS AS CLIENT_ADDRESS_TYPE_TXT_TS 
			,CLIENT_ADDRESS.CLIENT_ID AS CLIENT_ADDRESS_CLIENT_ID 
			,CLIENT_ADDRESS.ATTENTION_TO AS CLIENT_ADDRESS_ATTENTION_TO 
			,CLIENT_ADDRESS.ADDRESS_LINE_1 AS CLIENT_ADDRESS_ADDRESS_LINE_1 
			,CLIENT_ADDRESS.ADDRESS_LINE_2 AS CLIENT_ADDRESS_ADDRESS_LINE_2 
			,CLIENT_ADDRESS.CITY AS CLIENT_ADDRESS_CITY 
			,CLIENT_ADDRESS.ADDR_PROVINCE_ID AS CLIENT_ADDRESS_ADDR_PROVINCE_ID 
			,ADDR_PROVINCE.ADDR_COUNTRY_ID AS ADDR_PROVINCE_ADDR_COUNTRY_ID 
			,ADDR_COUNTRY.COUNTRY_CODE AS ADDR_COUNTRY_COUNTRY_CODE 
			,ADDR_COUNTRY.TRAN_GATEWAY_ID AS ADDR_COUNTRY_TRAN_GATEWAY_ID 
			,TRAN_GATEWAY.CB AS TRAN_GATEWAY_CB 
			,TRAN_GATEWAY.DC AS TRAN_GATEWAY_DC 
			,TRAN_GATEWAY.MB AS TRAN_GATEWAY_MB 
			,TRAN_GATEWAY.DM AS TRAN_GATEWAY_DM 
			,TRAN_GATEWAY.TS AS TRAN_GATEWAY_TS 
			,TRAN_GATEWAY_TXT.LG_ID AS TRAN_GATEWAY_TXT_LG_ID 
			,TRAN_GATEWAY_TXT.NAME AS TRAN_GATEWAY_TXT_NAME 
			,TRAN_GATEWAY_TXT.DESCR AS TRAN_GATEWAY_TXT_DESCR 
			,TRAN_GATEWAY_TXT.CB AS TRAN_GATEWAY_TXT_CB 
			,TRAN_GATEWAY_TXT.DC AS TRAN_GATEWAY_TXT_DC 
			,TRAN_GATEWAY_TXT.MB AS TRAN_GATEWAY_TXT_MB 
			,TRAN_GATEWAY_TXT.DM AS TRAN_GATEWAY_TXT_DM 
			,TRAN_GATEWAY_TXT.TS AS TRAN_GATEWAY_TXT_TS 
			,ADDR_COUNTRY.STATUS_ID AS ADDR_COUNTRY_STATUS_ID 
			,ADDR_COUNTRY.CB AS ADDR_COUNTRY_CB 
			,ADDR_COUNTRY.DC AS ADDR_COUNTRY_DC 
			,ADDR_COUNTRY.MB AS ADDR_COUNTRY_MB 
			,ADDR_COUNTRY.DM AS ADDR_COUNTRY_DM 
			,ADDR_COUNTRY.TS AS ADDR_COUNTRY_TS 
			,ADDR_COUNTRY_TXT.LG_ID AS ADDR_COUNTRY_TXT_LG_ID 
			,ADDR_COUNTRY_TXT.NAME AS ADDR_COUNTRY_TXT_NAME 
			,ADDR_COUNTRY_TXT.DESCR AS ADDR_COUNTRY_TXT_DESCR 
			,ADDR_COUNTRY_TXT.CB AS ADDR_COUNTRY_TXT_CB 
			,ADDR_COUNTRY_TXT.DC AS ADDR_COUNTRY_TXT_DC 
			,ADDR_COUNTRY_TXT.MB AS ADDR_COUNTRY_TXT_MB 
			,ADDR_COUNTRY_TXT.DM AS ADDR_COUNTRY_TXT_DM 
			,ADDR_COUNTRY_TXT.TS AS ADDR_COUNTRY_TXT_TS 
			,ADDR_PROVINCE.PROVINCE_CODE AS ADDR_PROVINCE_PROVINCE_CODE 
			,ADDR_PROVINCE.TRAN_GATEWAY_ID AS ADDR_PROVINCE_TRAN_GATEWAY_ID 
			,ADDR_PROVINCE.STATUS_ID AS ADDR_PROVINCE_STATUS_ID 
			,ADDR_PROVINCE.CB AS ADDR_PROVINCE_CB 
			,ADDR_PROVINCE.DC AS ADDR_PROVINCE_DC 
			,ADDR_PROVINCE.MB AS ADDR_PROVINCE_MB 
			,ADDR_PROVINCE.DM AS ADDR_PROVINCE_DM 
			,ADDR_PROVINCE.TS AS ADDR_PROVINCE_TS 
			,ADDR_PROVINCE_TXT.LG_ID AS ADDR_PROVINCE_TXT_LG_ID 
			,ADDR_PROVINCE_TXT.NAME AS ADDR_PROVINCE_TXT_NAME 
			,ADDR_PROVINCE_TXT.DESCR AS ADDR_PROVINCE_TXT_DESCR 
			,ADDR_PROVINCE_TXT.CB AS ADDR_PROVINCE_TXT_CB 
			,ADDR_PROVINCE_TXT.DC AS ADDR_PROVINCE_TXT_DC 
			,ADDR_PROVINCE_TXT.MB AS ADDR_PROVINCE_TXT_MB 
			,ADDR_PROVINCE_TXT.DM AS ADDR_PROVINCE_TXT_DM 
			,ADDR_PROVINCE_TXT.TS AS ADDR_PROVINCE_TXT_TS 
			,CLIENT_ADDRESS.POSTAL_CODE AS CLIENT_ADDRESS_POSTAL_CODE 
			,CLIENT_ADDRESS.TELEPHONE_NUMBER AS CLIENT_ADDRESS_TELEPHONE_NUMBER 
			,CLIENT_ADDRESS_TXT.CLIENT_ADDRESS_ID AS CLIENT_ADDRESS_TXT_CLIENT_ADDRESS_ID 
			,CLIENT_ADDRESS_TXT.LG_ID AS CLIENT_ADDRESS_TXT_LG_ID 
			,CLIENT_ADDRESS_TXT.NAME AS CLIENT_ADDRESS_TXT_NAME 
			,CLIENT_ADDRESS_TXT.DESCR AS CLIENT_ADDRESS_TXT_DESCR 
			,CLIENT_ADDRESS_TXT.CB AS CLIENT_ADDRESS_TXT_CB 
			,CLIENT_ADDRESS_TXT.DC AS CLIENT_ADDRESS_TXT_DC 
			,CLIENT_ADDRESS_TXT.MB AS CLIENT_ADDRESS_TXT_MB 
			,CLIENT_ADDRESS_TXT.DM AS CLIENT_ADDRESS_TXT_DM 
			,CLIENT_ADDRESS_TXT.TS AS CLIENT_ADDRESS_TXT_TS 
		FROM CLIENT_ADDRESS 
		INNER JOIN CLIENT_ADDRESS_TXT 
			 ON CLIENT_ADDRESS.CLIENT_ADDRESS_ID = CLIENT_ADDRESS_TXT.CLIENT_ADDRESS_ID 
		INNER JOIN LG 
			 ON CLIENT_ADDRESS_TXT.LG_ID = LG.LG_ID 
			INNER JOIN LG_TXT 
			 ON LG.LG_ID = LG_TXT.LG_ID 
		INNER JOIN ADDR_PROVINCE 
			 ON CLIENT_ADDRESS.ADDR_PROVINCE_ID = ADDR_PROVINCE.ADDR_PROVINCE_ID 
		INNER JOIN ADDR_PROVINCE_TXT 
			 ON ADDR_PROVINCE.ADDR_PROVINCE_ID = ADDR_PROVINCE_TXT.ADDR_PROVINCE_ID 
			AND ADDR_PROVINCE_TXT.LG_ID = LG.LG_ID
		INNER JOIN ADDR_COUNTRY 
			 ON ADDR_PROVINCE.ADDR_COUNTRY_ID = ADDR_COUNTRY.ADDR_COUNTRY_ID 
		INNER JOIN ADDR_COUNTRY_TXT 
			 ON ADDR_COUNTRY.ADDR_COUNTRY_ID = ADDR_COUNTRY_TXT.ADDR_COUNTRY_ID 
			AND ADDR_COUNTRY_TXT.LG_ID = LG.LG_ID
		INNER JOIN TRAN_GATEWAY 
			 ON ADDR_COUNTRY.TRAN_GATEWAY_ID = TRAN_GATEWAY.TRAN_GATEWAY_ID 
		INNER JOIN TRAN_GATEWAY_TXT 
			 ON TRAN_GATEWAY.TRAN_GATEWAY_ID = TRAN_GATEWAY_TXT.TRAN_GATEWAY_ID 
			AND TRAN_GATEWAY_TXT.LG_ID = LG.LG_ID
		INNER JOIN CLIENT_ADDRESS_TYPE 
			 ON CLIENT_ADDRESS.CLIENT_ADDRESS_TYPE_ID = CLIENT_ADDRESS_TYPE.CLIENT_ADDRESS_TYPE_ID 
		INNER JOIN CLIENT_ADDRESS_TYPE_TXT 
			 ON CLIENT_ADDRESS_TYPE.CLIENT_ADDRESS_TYPE_ID = CLIENT_ADDRESS_TYPE_TXT.CLIENT_ADDRESS_TYPE_ID 
			AND CLIENT_ADDRESS_TYPE_TXT.LG_ID = LG.LG_ID
		";
		if (isset($CLIENT_ADDRESS_client_address_id))
			$this->db->addWhere("CLIENT_ADDRESS.client_address_id", $CLIENT_ADDRESS_client_address_id, DATATYPE::$int);

		$recordSet = parent::executeStmtSelect($sql);
		$this->db->clearWhere();
		return $this->db->recordSetGetAll_assoc($recordSet);

	}

	public function selectRecord_listbox($CLIENT_ADDRESS_client_address_id=null)
	{

		$sql = "SELECT
			CLIENT_ADDRESS.CLIENT_ADDRESS_ID AS CLIENT_ADDRESS_CLIENT_ADDRESS_ID 
			,CLIENT_ADDRESS.CLIENT_ADDRESS_TYPE_ID AS CLIENT_ADDRESS_CLIENT_ADDRESS_TYPE_ID 
			,CLIENT_ADDRESS.CLIENT_ID AS CLIENT_ADDRESS_CLIENT_ID 
			,CLIENT_ADDRESS.ATTENTION_TO AS CLIENT_ADDRESS_ATTENTION_TO 
			,CLIENT_ADDRESS.ADDRESS_LINE_1 AS CLIENT_ADDRESS_ADDRESS_LINE_1 
			,CLIENT_ADDRESS.ADDRESS_LINE_2 AS CLIENT_ADDRESS_ADDRESS_LINE_2 
			,CLIENT_ADDRESS.CITY AS CLIENT_ADDRESS_CITY 
			,CLIENT_ADDRESS.ADDR_PROVINCE_ID AS CLIENT_ADDRESS_ADDR_PROVINCE_ID 
			,CLIENT_ADDRESS.POSTAL_CODE AS CLIENT_ADDRESS_POSTAL_CODE 
			,CLIENT_ADDRESS.TELEPHONE_NUMBER AS CLIENT_ADDRESS_TELEPHONE_NUMBER 
		FROM CLIENT_ADDRESS 
		";
		if (isset($CLIENT_ADDRESS_client_address_id))
			$this->db->addWhere("CLIENT_ADDRESS.client_address_id", $CLIENT_ADDRESS_client_address_id, DATATYPE::$int);

		$recordSet = parent::executeStmtSelect($sql);
		$this->db->clearWhere();
		return $this->db->recordSetGetAll_assoc($recordSet);

	}

	private function setParameters($stmtType=1, $CLIENT_ADDRESS_client_address_type_id, $CLIENT_ADDRESS_client_id, $CLIENT_ADDRESS_attention_to, $CLIENT_ADDRESS_address_line_1, $CLIENT_ADDRESS_address_line_2, $CLIENT_ADDRESS_city, $CLIENT_ADDRESS_addr_province_id, $CLIENT_ADDRESS_postal_code, $CLIENT_ADDRESS_telephone_number, $user_id)
	{

		$this->db->clearParameters();
		$this->db->addParameter("client_address_type_id", $CLIENT_ADDRESS_client_address_type_id, DATATYPE::$int);
		$this->db->addParameter("client_id", $CLIENT_ADDRESS_client_id, DATATYPE::$int);
		$this->db->addParameter("attention_to", $CLIENT_ADDRESS_attention_to, DATATYPE::$varchar);
		$this->db->addParameter("address_line_1", $CLIENT_ADDRESS_address_line_1, DATATYPE::$varchar);
		$this->db->addParameter("address_line_2", $CLIENT_ADDRESS_address_line_2, DATATYPE::$varchar);
		$this->db->addParameter("city", $CLIENT_ADDRESS_city, DATATYPE::$varchar);
		$this->db->addParameter("addr_province_id", $CLIENT_ADDRESS_addr_province_id, DATATYPE::$varchar);
		$this->db->addParameter("postal_code", $CLIENT_ADDRESS_postal_code, DATATYPE::$varchar);
		$this->db->addParameter("telephone_number", $CLIENT_ADDRESS_telephone_number, DATATYPE::$varchar);


		parent::setStandardParameters($stmtType, $user_id);


	}

	private function setParametersUpdate($stmtType=1, $CLIENT_ADDRESS_client_address_type_id, $CLIENT_ADDRESS_client_id, $CLIENT_ADDRESS_attention_to, $CLIENT_ADDRESS_address_line_1, $CLIENT_ADDRESS_address_line_2, $CLIENT_ADDRESS_city, $CLIENT_ADDRESS_addr_province_id, $CLIENT_ADDRESS_postal_code, $CLIENT_ADDRESS_telephone_number, $user_id)
	{

		$this->db->clearParameters();
		$this->db->addParameter("client_address_type_id", $CLIENT_ADDRESS_client_address_type_id, DATATYPE::$int);
		$this->db->addParameter("client_id", $CLIENT_ADDRESS_client_id, DATATYPE::$int);
		$this->db->addParameter("attention_to", $CLIENT_ADDRESS_attention_to, DATATYPE::$varchar);
		$this->db->addParameter("address_line_1", $CLIENT_ADDRESS_address_line_1, DATATYPE::$varchar);
		$this->db->addParameter("address_line_2", $CLIENT_ADDRESS_address_line_2, DATATYPE::$varchar);
		$this->db->addParameter("city", $CLIENT_ADDRESS_city, DATATYPE::$varchar);
		$this->db->addParameter("addr_province_id", $CLIENT_ADDRESS_addr_province_id, DATATYPE::$varchar);
		$this->db->addParameter("postal_code", $CLIENT_ADDRESS_postal_code, DATATYPE::$varchar);
		$this->db->addParameter("telephone_number", $CLIENT_ADDRESS_telephone_number, DATATYPE::$varchar);


		parent::setStandardParameters($stmtType, $user_id);


	}

	public function insertRecord($CLIENT_ADDRESS_client_address_type_id, $CLIENT_ADDRESS_client_id, $CLIENT_ADDRESS_attention_to, $CLIENT_ADDRESS_address_line_1, $CLIENT_ADDRESS_address_line_2, $CLIENT_ADDRESS_city, $CLIENT_ADDRESS_addr_province_id, $CLIENT_ADDRESS_postal_code, $CLIENT_ADDRESS_telephone_number, $user_id)
	{

		$stmtType = DBSTMT_TYPE::$insert;

		$valid = $this->validate($stmtType, $CLIENT_ADDRESS_client_address_type_id, $CLIENT_ADDRESS_client_id, $CLIENT_ADDRESS_attention_to, $CLIENT_ADDRESS_address_line_1, $CLIENT_ADDRESS_address_line_2, $CLIENT_ADDRESS_city, $CLIENT_ADDRESS_addr_province_id, $CLIENT_ADDRESS_postal_code, $CLIENT_ADDRESS_telephone_number, $CLIENT_ADDRESS_client_address_id, $user_id);
		if ($valid)
		{
			$this->setParameters($stmtType, $CLIENT_ADDRESS_client_address_type_id, $CLIENT_ADDRESS_client_id, $CLIENT_ADDRESS_attention_to, $CLIENT_ADDRESS_address_line_1, $CLIENT_ADDRESS_address_line_2, $CLIENT_ADDRESS_city, $CLIENT_ADDRESS_addr_province_id, $CLIENT_ADDRESS_postal_code, $CLIENT_ADDRESS_telephone_number, $user_id);        
			return parent::executeStmt();
		}
		else
		{
			return parent::errProcessing();
		}
	}

	public function insertRecordByAssocArr($valArr,$user_id)
	{

		$CLIENT_ADDRESS_client_address_type_id = $valArr['CLIENT_ADDRESS_CLIENT_ADDRESS_TYPE_ID'];
		$CLIENT_ADDRESS_client_id = $valArr['CLIENT_ADDRESS_CLIENT_ID'];
		$CLIENT_ADDRESS_attention_to = $valArr['CLIENT_ADDRESS_ATTENTION_TO'];
		$CLIENT_ADDRESS_address_line_1 = $valArr['CLIENT_ADDRESS_ADDRESS_LINE_1'];
		$CLIENT_ADDRESS_address_line_2 = $valArr['CLIENT_ADDRESS_ADDRESS_LINE_2'];
		$CLIENT_ADDRESS_city = $valArr['CLIENT_ADDRESS_CITY'];
		$CLIENT_ADDRESS_addr_province_id = $valArr['CLIENT_ADDRESS_ADDR_PROVINCE_ID'];
		$CLIENT_ADDRESS_postal_code = $valArr['CLIENT_ADDRESS_POSTAL_CODE'];
		$CLIENT_ADDRESS_telephone_number = $valArr['CLIENT_ADDRESS_TELEPHONE_NUMBER'];



		$stmtType = DBSTMT_TYPE::$insert;

		$valid = $this->validate($stmtType, $CLIENT_ADDRESS_client_address_type_id, $CLIENT_ADDRESS_client_id, $CLIENT_ADDRESS_attention_to, $CLIENT_ADDRESS_address_line_1, $CLIENT_ADDRESS_address_line_2, $CLIENT_ADDRESS_city, $CLIENT_ADDRESS_addr_province_id, $CLIENT_ADDRESS_postal_code, $CLIENT_ADDRESS_telephone_number, $CLIENT_ADDRESS_client_address_id, $user_id);
		if ($valid)
		{
			$this->setParameters($stmtType, $CLIENT_ADDRESS_client_address_type_id, $CLIENT_ADDRESS_client_id, $CLIENT_ADDRESS_attention_to, $CLIENT_ADDRESS_address_line_1, $CLIENT_ADDRESS_address_line_2, $CLIENT_ADDRESS_city, $CLIENT_ADDRESS_addr_province_id, $CLIENT_ADDRESS_postal_code, $CLIENT_ADDRESS_telephone_number, $user_id);        
			return parent::executeStmt();
		}
		else
		{
			return parent::errProcessing();
		}
	}

	public function updateRecord($CLIENT_ADDRESS_client_address_type_id, $CLIENT_ADDRESS_client_id, $CLIENT_ADDRESS_attention_to, $CLIENT_ADDRESS_address_line_1, $CLIENT_ADDRESS_address_line_2, $CLIENT_ADDRESS_city, $CLIENT_ADDRESS_addr_province_id, $CLIENT_ADDRESS_postal_code, $CLIENT_ADDRESS_telephone_number, $user_id)
	{

		$stmtType = DBSTMT_TYPE::$update;

		$valid = $this->validate($stmtType, $CLIENT_ADDRESS_client_address_type_id, $CLIENT_ADDRESS_client_id, $CLIENT_ADDRESS_attention_to, $CLIENT_ADDRESS_address_line_1, $CLIENT_ADDRESS_address_line_2, $CLIENT_ADDRESS_city, $CLIENT_ADDRESS_addr_province_id, $CLIENT_ADDRESS_postal_code, $CLIENT_ADDRESS_telephone_number, $user_id);
		if ($valid)
		{
			$this->setParametersUpdate($stmtType, $CLIENT_ADDRESS_client_address_type_id, $CLIENT_ADDRESS_client_id, $CLIENT_ADDRESS_attention_to, $CLIENT_ADDRESS_address_line_1, $CLIENT_ADDRESS_address_line_2, $CLIENT_ADDRESS_city, $CLIENT_ADDRESS_addr_province_id, $CLIENT_ADDRESS_postal_code, $CLIENT_ADDRESS_telephone_number, $user_id); 
		if (isset($CLIENT_ADDRESS_client_address_id))
			$this->db->addWhere("CLIENT_ADDRESS.client_address_id", $CLIENT_ADDRESS_client_address_id, DATATYPE::$int);
               
			return parent::executeStmtUpdate();
		}
		else
		{
			return parent::errProcessing();
		}
	}

	public function updateRecordByAssocArr($valArr,$user_id)
	{
		$CLIENT_ADDRESS_client_address_id = $valArr['CLIENT_ADDRESS_CLIENT_ADDRESS_ID'];
		$CLIENT_ADDRESS_client_address_type_id = $valArr['CLIENT_ADDRESS_CLIENT_ADDRESS_TYPE_ID'];
		$CLIENT_ADDRESS_client_id = $valArr['CLIENT_ADDRESS_CLIENT_ID'];
		$CLIENT_ADDRESS_attention_to = $valArr['CLIENT_ADDRESS_ATTENTION_TO'];
		$CLIENT_ADDRESS_address_line_1 = $valArr['CLIENT_ADDRESS_ADDRESS_LINE_1'];
		$CLIENT_ADDRESS_address_line_2 = $valArr['CLIENT_ADDRESS_ADDRESS_LINE_2'];
		$CLIENT_ADDRESS_city = $valArr['CLIENT_ADDRESS_CITY'];
		$CLIENT_ADDRESS_addr_province_id = $valArr['CLIENT_ADDRESS_ADDR_PROVINCE_ID'];
		$CLIENT_ADDRESS_postal_code = $valArr['CLIENT_ADDRESS_POSTAL_CODE'];
		$CLIENT_ADDRESS_telephone_number = $valArr['CLIENT_ADDRESS_TELEPHONE_NUMBER'];


		$stmtType = DBSTMT_TYPE::$update;

		$valid = $this->validate($stmtType, $CLIENT_ADDRESS_client_address_type_id, $CLIENT_ADDRESS_client_id, $CLIENT_ADDRESS_attention_to, $CLIENT_ADDRESS_address_line_1, $CLIENT_ADDRESS_address_line_2, $CLIENT_ADDRESS_city, $CLIENT_ADDRESS_addr_province_id, $CLIENT_ADDRESS_postal_code, $CLIENT_ADDRESS_telephone_number, $user_id);
		if ($valid)
		{
			$this->setParametersUpdate($stmtType, $CLIENT_ADDRESS_client_address_type_id, $CLIENT_ADDRESS_client_id, $CLIENT_ADDRESS_attention_to, $CLIENT_ADDRESS_address_line_1, $CLIENT_ADDRESS_address_line_2, $CLIENT_ADDRESS_city, $CLIENT_ADDRESS_addr_province_id, $CLIENT_ADDRESS_postal_code, $CLIENT_ADDRESS_telephone_number, $user_id); 
		if (isset($CLIENT_ADDRESS_client_address_id))
			$this->db->addWhere("CLIENT_ADDRESS.client_address_id", $CLIENT_ADDRESS_client_address_id, DATATYPE::$int);
               
			return parent::executeStmtUpdate();
		}
		else
		{
			return parent::errProcessing();
		}
	}

	protected function validate($stmtType=1, $CLIENT_ADDRESS_client_address_type_id, $CLIENT_ADDRESS_client_id, $CLIENT_ADDRESS_attention_to, $CLIENT_ADDRESS_address_line_1, $CLIENT_ADDRESS_address_line_2, $CLIENT_ADDRESS_city, $CLIENT_ADDRESS_addr_province_id, $CLIENT_ADDRESS_postal_code, $CLIENT_ADDRESS_telephone_number, $user_id)
	{
		$this->valid->isInt($user_id, 1, "user_id");

		$this->valid->isInt($CLIENT_ADDRESS_client_address_type_id, 1, "CLIENT_ADDRESS_client_address_type_id");
		$this->valid->isInt($CLIENT_ADDRESS_client_id, 1, "CLIENT_ADDRESS_client_id");
		$this->valid->isAlpha($CLIENT_ADDRESS_attention_to, 1, "CLIENT_ADDRESS_attention_to");
		$this->valid->isAlpha($CLIENT_ADDRESS_address_line_1, 1, "CLIENT_ADDRESS_address_line_1");
		$this->valid->isAlpha($CLIENT_ADDRESS_address_line_2, 1, "CLIENT_ADDRESS_address_line_2");
		$this->valid->isAlpha($CLIENT_ADDRESS_city, 1, "CLIENT_ADDRESS_city");
		$this->valid->isInt($CLIENT_ADDRESS_addr_province_id, 1, "CLIENT_ADDRESS_addr_province_id");
		$this->valid->isAlpha($CLIENT_ADDRESS_postal_code, 1, "CLIENT_ADDRESS_postal_code");
		$this->valid->isAlpha($CLIENT_ADDRESS_telephone_number, 1, "CLIENT_ADDRESS_telephone_number");


		return $this->valid->VALID();
	}

	protected function validate_update($stmtType=1, $CLIENT_ADDRESS_client_address_type_id, $CLIENT_ADDRESS_client_id, $CLIENT_ADDRESS_attention_to, $CLIENT_ADDRESS_address_line_1, $CLIENT_ADDRESS_address_line_2, $CLIENT_ADDRESS_city, $CLIENT_ADDRESS_addr_province_id, $CLIENT_ADDRESS_postal_code, $CLIENT_ADDRESS_telephone_number, $user_id)
	{
		$this->valid->isInt($user_id, 1, "user_id");
		$this->valid->isInt($CLIENT_ADDRESS_client_address_type_id, 1, "CLIENT_ADDRESS_client_address_type_id");
		$this->valid->isInt($CLIENT_ADDRESS_client_id, 1, "CLIENT_ADDRESS_client_id");
		$this->valid->isAlpha($CLIENT_ADDRESS_attention_to, 1, "CLIENT_ADDRESS_attention_to");
		$this->valid->isAlpha($CLIENT_ADDRESS_address_line_1, 1, "CLIENT_ADDRESS_address_line_1");
		$this->valid->isAlpha($CLIENT_ADDRESS_address_line_2, 1, "CLIENT_ADDRESS_address_line_2");
		$this->valid->isAlpha($CLIENT_ADDRESS_city, 1, "CLIENT_ADDRESS_city");
		$this->valid->isInt($CLIENT_ADDRESS_addr_province_id, 1, "CLIENT_ADDRESS_addr_province_id");
		$this->valid->isAlpha($CLIENT_ADDRESS_postal_code, 1, "CLIENT_ADDRESS_postal_code");
		$this->valid->isAlpha($CLIENT_ADDRESS_telephone_number, 1, "CLIENT_ADDRESS_telephone_number");


		return $this->valid->VALID();
	}

}
?>